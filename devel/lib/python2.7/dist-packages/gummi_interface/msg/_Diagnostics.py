# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gummi_interface/Diagnostics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Diagnostics(genpy.Message):
  _md5sum = "a0c4c6ef5a9afa1f2c1607160e439c7d"
  _type = "gummi_interface/Diagnostics"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 equilibrium
float64 cocontraction
float64 ballistic
float64 encoder
float64 alpha_flexor
float64 alpha_extensor
float64 forward_error"""
  __slots__ = ['equilibrium','cocontraction','ballistic','encoder','alpha_flexor','alpha_extensor','forward_error']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       equilibrium,cocontraction,ballistic,encoder,alpha_flexor,alpha_extensor,forward_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Diagnostics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.equilibrium is None:
        self.equilibrium = 0.
      if self.cocontraction is None:
        self.cocontraction = 0.
      if self.ballistic is None:
        self.ballistic = 0.
      if self.encoder is None:
        self.encoder = 0.
      if self.alpha_flexor is None:
        self.alpha_flexor = 0.
      if self.alpha_extensor is None:
        self.alpha_extensor = 0.
      if self.forward_error is None:
        self.forward_error = 0.
    else:
      self.equilibrium = 0.
      self.cocontraction = 0.
      self.ballistic = 0.
      self.encoder = 0.
      self.alpha_flexor = 0.
      self.alpha_extensor = 0.
      self.forward_error = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.equilibrium, _x.cocontraction, _x.ballistic, _x.encoder, _x.alpha_flexor, _x.alpha_extensor, _x.forward_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.equilibrium, _x.cocontraction, _x.ballistic, _x.encoder, _x.alpha_flexor, _x.alpha_extensor, _x.forward_error,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.equilibrium, _x.cocontraction, _x.ballistic, _x.encoder, _x.alpha_flexor, _x.alpha_extensor, _x.forward_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.equilibrium, _x.cocontraction, _x.ballistic, _x.encoder, _x.alpha_flexor, _x.alpha_extensor, _x.forward_error,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
