// Generated by gencpp from file gummi_interface/Diagnostics.msg
// DO NOT EDIT!


#ifndef GUMMI_INTERFACE_MESSAGE_DIAGNOSTICS_H
#define GUMMI_INTERFACE_MESSAGE_DIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gummi_interface
{
template <class ContainerAllocator>
struct Diagnostics_
{
  typedef Diagnostics_<ContainerAllocator> Type;

  Diagnostics_()
    : equilibrium(0.0)
    , cocontraction(0.0)
    , ballistic(0.0)
    , encoder(0.0)
    , alpha_flexor(0.0)
    , alpha_extensor(0.0)
    , forward_error(0.0)  {
    }
  Diagnostics_(const ContainerAllocator& _alloc)
    : equilibrium(0.0)
    , cocontraction(0.0)
    , ballistic(0.0)
    , encoder(0.0)
    , alpha_flexor(0.0)
    , alpha_extensor(0.0)
    , forward_error(0.0)  {
  (void)_alloc;
    }



   typedef double _equilibrium_type;
  _equilibrium_type equilibrium;

   typedef double _cocontraction_type;
  _cocontraction_type cocontraction;

   typedef double _ballistic_type;
  _ballistic_type ballistic;

   typedef double _encoder_type;
  _encoder_type encoder;

   typedef double _alpha_flexor_type;
  _alpha_flexor_type alpha_flexor;

   typedef double _alpha_extensor_type;
  _alpha_extensor_type alpha_extensor;

   typedef double _forward_error_type;
  _forward_error_type forward_error;





  typedef boost::shared_ptr< ::gummi_interface::Diagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gummi_interface::Diagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct Diagnostics_

typedef ::gummi_interface::Diagnostics_<std::allocator<void> > Diagnostics;

typedef boost::shared_ptr< ::gummi_interface::Diagnostics > DiagnosticsPtr;
typedef boost::shared_ptr< ::gummi_interface::Diagnostics const> DiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gummi_interface::Diagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gummi_interface::Diagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gummi_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'gummi_interface': ['/home/altair/ws_gummi_popeye/src/gummi_interface/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gummi_interface::Diagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gummi_interface::Diagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gummi_interface::Diagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gummi_interface::Diagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gummi_interface::Diagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gummi_interface::Diagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gummi_interface::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0c4c6ef5a9afa1f2c1607160e439c7d";
  }

  static const char* value(const ::gummi_interface::Diagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0c4c6ef5a9afa1fULL;
  static const uint64_t static_value2 = 0x2c1607160e439c7dULL;
};

template<class ContainerAllocator>
struct DataType< ::gummi_interface::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gummi_interface/Diagnostics";
  }

  static const char* value(const ::gummi_interface::Diagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gummi_interface::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 equilibrium\n\
float64 cocontraction\n\
float64 ballistic\n\
float64 encoder\n\
float64 alpha_flexor\n\
float64 alpha_extensor\n\
float64 forward_error\n\
";
  }

  static const char* value(const ::gummi_interface::Diagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gummi_interface::Diagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.equilibrium);
      stream.next(m.cocontraction);
      stream.next(m.ballistic);
      stream.next(m.encoder);
      stream.next(m.alpha_flexor);
      stream.next(m.alpha_extensor);
      stream.next(m.forward_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gummi_interface::Diagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gummi_interface::Diagnostics_<ContainerAllocator>& v)
  {
    s << indent << "equilibrium: ";
    Printer<double>::stream(s, indent + "  ", v.equilibrium);
    s << indent << "cocontraction: ";
    Printer<double>::stream(s, indent + "  ", v.cocontraction);
    s << indent << "ballistic: ";
    Printer<double>::stream(s, indent + "  ", v.ballistic);
    s << indent << "encoder: ";
    Printer<double>::stream(s, indent + "  ", v.encoder);
    s << indent << "alpha_flexor: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_flexor);
    s << indent << "alpha_extensor: ";
    Printer<double>::stream(s, indent + "  ", v.alpha_extensor);
    s << indent << "forward_error: ";
    Printer<double>::stream(s, indent + "  ", v.forward_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GUMMI_INTERFACE_MESSAGE_DIAGNOSTICS_H
